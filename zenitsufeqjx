--// START FROM ACCESSORY
for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
if v:IsA("BasePart") and v.Name ~="HumanoidRootPart" then 
game:GetService("RunService").Heartbeat:connect(function()
v.Velocity = Vector3.new(0,-30,0)
wait(0.5)
end)
end
end
 
local LocalPlayer = game.Players.LocalPlayer
 
function Create(HatName, position, rotation, part)
Instance.new("Attachment",game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle)
Instance.new("AlignPosition",game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle)
Instance.new("AlignOrientation", game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle)
Instance.new("Attachment",game:GetService("Workspace")[LocalPlayer.Name][part])
workspace[LocalPlayer.Name][part].Attachment.Name = HatName
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AccessoryWeld:Destroy()
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignPosition.Attachment0 = game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.Attachment
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignOrientation.Attachment0 = game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.Attachment
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignPosition.Attachment1 = game:GetService("Workspace")[LocalPlayer.Name][part][HatName]
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignOrientation.Attachment1 = game:GetService("Workspace")[LocalPlayer.Name][part][HatName]
game:GetService("Workspace")[LocalPlayer.Name][part][HatName].Position = position
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.Attachment.Rotation = rotation
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignPosition.Responsiveness = 200
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignOrientation.Responsiveness = 200
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignPosition.RigidityEnabled = true
game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.AlignOrientation.RigidityEnabled = true
end
 
function Edit(HatName, position, rotation, part)
    game:GetService("Workspace")[LocalPlayer.Name][HatName].Handle.Attachment.Rotation = rotation
    game:GetService("Workspace")[LocalPlayer.Name][part][HatName].Position = position
end
 
function rmesh(HatName)
for _,mesh in next, workspace[LocalPlayer.Name][HatName]:GetDescendants() do
if mesh:IsA("Mesh") or mesh:IsA("SpecialMesh") then
mesh:Remove()
end
end
end
 
Create((hat),(HatPosition),(HatRotation),(HatAttachmentPart))
 
 
 
 
 
 
 
 
 
--// END FROM ACCESSORY AND START FROM SCRIPT
 
sethiddenproperty(game.Players.LocalPlayer,"MaximumSimulationRadius",math.huge)
sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",1.0000000331814e+32)
 
for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
if v:IsA("BasePart") and v.Name ~="HumanoidRootPart" then 
game:GetService("RunService").Heartbeat:connect(function()
v.Velocity = Vector3.new(0,-25.05,0)
wait(0.5)
end)
end
end
 
-- // Uses Mizt's bypass \\ --
 
Bypass = "death"
loadstring(game:GetObjects("rbxassetid://5325226148")[1].Source)()
 
e = Instance.new("BodyVelocity",game.Players.LocalPlayer.Character.HumanoidRootPart)
e.Velocity = Vector3.new(0,-25.05,0)
e.P = math.huge
--e.MaxForce = Vector3.new(0,3000,0)
 
local IsDead = false
local StateMover = true
 
local playerss = workspace.non
local bbv,bullet
if Bypass == "death" then
	bullet = game.Players.LocalPlayer.Character["HumanoidRootPart"]
	bullet.Transparency = (FlingBlockInvisible ~= true and 0 or 1)
	bullet.Massless = true
	if bullet:FindFirstChildOfClass("Attachment") then
		for _,v in pairs(bullet:GetChildren()) do
			if v:IsA("Attachment") then
				v:Destroy()
			end
		end
	end
 
	bbv = Instance.new("BodyPosition",bullet)
    bbv.Position = playerss.Torso.Position
end
 
if Bypass == "death" then
coroutine.wrap(function()
	while true do
		if not playerss or not playerss:FindFirstChildOfClass("Humanoid") or playerss:FindFirstChildOfClass("Humanoid").Health <= 0 then IsDead = true; return end
		if StateMover then
			bbv.Position = playerss.Torso.Position
    		bullet.Position = playerss.Torso.Position
		end
		game:GetService("RunService").RenderStepped:wait()
	end
end)()
end
 
if HighlightFlingBlock ~= false then
    local Highlight = Instance.new("SelectionBox")
    Highlight.Adornee = bullet
    Highlight.Color3 = (typeof(FlingHighlightColor)=="Color3" and FlingHighlightColor) or (Color3.fromRGB(255,0,0))
    Highlight.Parent = bullet
    Highlight.Name = "HighlightBox"
end
 
bbav = Instance.new("BodyAngularVelocity",bullet)
    bbav.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)
    bbav.P = 100000000000000000000000000000
    bbav.AngularVelocity = Vector3.new(10000000000000000000000000000000,100000000000000000000000000,100000000000000000)
 
local Player=game.Players.LocalPlayer local Character=workspace.non local hum = Character.Humanoid local LeftArm=Character["Left Arm"] local LeftLeg=Character["Left Leg"] local RightArm=Character["Right Arm"] local RightLeg=Character["Right Leg"] local Root=Character["HumanoidRootPart"] local Head=Character["Head"] local Torso=Character["Torso"] local Neck=Torso["Neck"] local mouse = Player:GetMouse() local position = nil local sine = 0 local t = 0 local change = 1
 
Character.Humanoid.WalkSpeed = 19
 
local HEADLERP = Instance.new("ManualWeld")
HEADLERP.Parent = Head
HEADLERP.Part0 = Head
HEADLERP.Part1 = Head
HEADLERP.C0 = CFrame.new(0, -1.5, -0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
local TORSOLERP = Instance.new("ManualWeld")
TORSOLERP.Parent = Root
TORSOLERP.Part0 = Torso
TORSOLERP.C0 = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
local ROOTLERP = Instance.new("ManualWeld")
ROOTLERP.Parent = Root
ROOTLERP.Part0 = Root
ROOTLERP.Part1 = Torso
ROOTLERP.C0 = CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
local RIGHTARMLERP = Instance.new("ManualWeld")
RIGHTARMLERP.Parent = RightArm
RIGHTARMLERP.Part0 = RightArm
RIGHTARMLERP.Part1 = Torso
RIGHTARMLERP.C0 = CFrame.new(-1.5, 0, -0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
local LEFTARMLERP = Instance.new("ManualWeld")
LEFTARMLERP.Parent = LeftArm
LEFTARMLERP.Part0 = LeftArm
LEFTARMLERP.Part1 = Torso
LEFTARMLERP.C0 = CFrame.new(1.5, 0, -0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
local RIGHTLEGLERP = Instance.new("ManualWeld")
RIGHTLEGLERP.Parent = RightLeg
RIGHTLEGLERP.Part0 = RightLeg
RIGHTLEGLERP.Part1 = Torso
RIGHTLEGLERP.C0 = CFrame.new(-0.5, 2, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
local LEFTLEGLERP = Instance.new("ManualWeld")
LEFTLEGLERP.Parent = LeftLeg
LEFTLEGLERP.Part0 = LeftLeg
LEFTLEGLERP.Part1 = Torso
LEFTLEGLERP.C0 = CFrame.new(0.5, 2, 0) * CFrame.Angles(math.rad(0), math.rad(0), math.rad(0))
 
function swait(num)
	if num == 0 or num == nil then
		game:service("RunService").Stepped:wait(0)
	else
		for i = 0, num do
			game:service("RunService").Stepped:wait(0)
		end
	end
end
 
idle = true
sneak = false
sneak2 = false
sit = false
cry = false
 
m = game.Players.LocalPlayer:GetMouse()
 
m.KeyDown:connect(function(k)
if k == "q" then
Character.Humanoid.WalkSpeed = 30
end
end)
 
m.KeyUp:connect(function(k)
if k == "q" then
Character.Humanoid.WalkSpeed = 19
end
end)
 
m.KeyDown:connect(function(k)
if k == "q" and sit == true then
Character.Humanoid.WalkSpeed = 0.1
end
end)
 
m.KeyUp:connect(function(k)
if k == "q" and sit == true then
Character.Humanoid.WalkSpeed = 0.01
end
end)
 
toggle = false
 
m.KeyDown:connect(function(k)
if k == "f" then
if toggle == false then
toggle = true
idle = false
sneak = true
sneak2 = false
sit = false
cry = false
Character.Humanoid.WalkSpeed = 0.1
wait(1.3)
char = workspace.non
forward = 30
 
local root = char['HumanoidRootPart']
local tppos = Instance.new("Attachment", root)
tppos.Position = Vector3.new(0, 0, -forward)
 
root.CFrame = CFrame.new(tppos.WorldPosition) * CFrame.Angles(0, math.rad(root.Orientation.Y), 0)
idle = false
sneak = false
sneak2 = true
sit = false
cry = false
wait(0.6)
toggle = false
idle = true
sneak = false
sneak2 = false
sit = false
cry = false
Character.Humanoid.WalkSpeed = 16
end
end
end)
 
m.KeyDown:connect(function(k)
if k == "e" then
if toggle == false then
toggle = true
idle = false
sneak = false
sneak2 = false
sit = true
cry = false
Character.Humanoid.WalkSpeed = 0.01
elseif toggle then
toggle = false
idle = true
sneak = false
sneak2 = false
sit = false
cry = false
Character.Humanoid.WalkSpeed = 16
end
end
end)
 
m.KeyDown:connect(function(k)
if k == "r" then
if toggle == false then
toggle = true
idle = false
sneak = false
sneak2 = false
sit = false
cry = true
Character.Humanoid.WalkSpeed = 13
elseif toggle then
toggle = false
idle = true
sneak = false
sneak2 = false
sit = false
cry = false
Character.Humanoid.WalkSpeed = 16
end
end
end)
 
m.KeyDown:connect(function(k)
if k == "r" then
if toggle == false and sit == true then
toggle = true
idle = false
sneak = false
sneak2 = false
sit = false
cry = true
Character.Humanoid.WalkSpeed = 13
elseif toggle and sit == true then
toggle = false
idle = true
sneak = false
sneak2 = false
sit = false
cry = false
Character.Humanoid.WalkSpeed = 16
end
end
end)
 
m.KeyDown:connect(function(k)
if k == "e" then
if toggle == false and cry == true then
toggle = true
idle = false
sneak = false
sneak2 = false
sit = true
cry = false
elseif toggle and cry == true then
toggle = false
idle = true
sneak = false
sneak2 = false
sit = false
cry = false
end
end
end)
 
coroutine.wrap(function() -------Checks
while true do
if idle then
if Root.Velocity.y > 1 then
position = "jump"
elseif Root.Velocity.y < -1 then
position = "fall"
elseif Root.Velocity.Magnitude < 2 then
position = "idle"
elseif Root.Velocity.Magnitude < 20 then
position = "walk"
elseif Root.Velocity.Magnitude > 20 then
position = "run"
end
end
wait()
end
end)()
 
coroutine.wrap(function() -------Checks
while true do
if sneak then
if Root.Velocity.y > 1 then
position = "jump1"
elseif Root.Velocity.y < -1 then
position = "fall1"
elseif Root.Velocity.Magnitude < 2 then
position = "sneak"
elseif Root.Velocity.Magnitude < 20 then
position = "walk1"
elseif Root.Velocity.Magnitude > 20 then
position = "run1"
end
end
wait()
end
end)()
 
coroutine.wrap(function() -------Checks
while true do
if sit then
if Root.Velocity.y > 1 then
position = "jump1"
elseif Root.Velocity.y < -1 then
position = "fall1"
elseif Root.Velocity.Magnitude < 2 then
position = "sit"
elseif Root.Velocity.Magnitude < 20 then
position = "walk1"
elseif Root.Velocity.Magnitude > 20 then
position = "run1"
end
end
wait()
end
end)()
 
coroutine.wrap(function() -------Checks
while true do
if cry then
if Root.Velocity.y > 1 then
position = "jump1"
elseif Root.Velocity.y < -1 then
position = "fall1"
elseif Root.Velocity.Magnitude < 2 then
position = "cry"
elseif Root.Velocity.Magnitude < 20 then
position = "walk2"
elseif Root.Velocity.Magnitude > 20 then
position = "run1"
end
end
wait()
end
end)()
 
coroutine.wrap(function() -------Checks
while true do
if sneak2 then
if Root.Velocity.y > 1 then
position = "jump1"
elseif Root.Velocity.y < -1 then
position = "fall1"
elseif Root.Velocity.Magnitude < 2 then
position = "sneak2"
elseif Root.Velocity.Magnitude < 20 then
position = "walk1"
elseif Root.Velocity.Magnitude > 20 then
position = "run1"
end
end
wait()
end
end)()
 
coroutine.wrap(function()
while true do
sine = sine + change
if position == "idle" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/30), 0 + 0.1 * math.sin(sine/30), 0 + 0 * math.sin(sine/30)) * CFrame.Angles(math.rad(-3 + 1 * math.sin(sine/30)), math.rad(0 + 0 * math.sin(sine/30)), math.rad(0 + 0 * math.sin(sine/30))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1.5 + 0 * math.sin(sine/25), 0.2 + 0.1 * math.sin(sine/25), 0 + 0 * math.sin(sine/25)) * CFrame.Angles(math.rad(0 + 5 * math.sin(sine/25)), math.rad(0 + 0 * math.sin(sine/25)), math.rad(-5 + 0 * math.sin(sine/25))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1.5 + 0 * math.sin(sine/25), 0.2 + 0.1 * math.sin(sine/25), 0 + 0 * math.sin(sine/25)) * CFrame.Angles(math.rad(0 + 5 * math.sin(sine/25)), math.rad(0 + 0 * math.sin(sine/25)), math.rad(5 + 0 * math.sin(sine/25))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/30), 2 + 0.1 * math.sin(sine/30), 0.05 + 0 * math.sin(sine/30)) * CFrame.Angles(math.rad(-3 + 1 * math.sin(sine/30)), math.rad(5 + 0 * math.sin(sine/30)), math.rad(-1 + 0 * math.sin(sine/30))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/30), 2 + 0.1 * math.sin(sine/30), 0.05 + 0 * math.sin(sine/30)) * CFrame.Angles(math.rad(-3 + 1 * math.sin(sine/30)), math.rad(-5 + 0 * math.sin(sine/30)), math.rad(1 + 0 * math.sin(sine/30))),0.1)
elseif position == "sneak" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/12), -1 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-38 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1 + 0 * math.sin(sine/12), -0.5 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-50 + 0 * math.sin(sine/12)), math.rad(-80 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1.5 + 0 * math.sin(sine/12), 0.2 + 0 * math.sin(sine/12), 0.5 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-40 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(-4 + 0 * math.sin(sine/12))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/12), 1 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-47 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/12), 2 + 0 * math.sin(sine/12), 0.4 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(20 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
elseif position == "sneak2" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/12), -1 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-38 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1.5 + 0 * math.sin(sine/12), 0.5 + 0 * math.sin(sine/12), 0.2 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(30 + 0 * math.sin(sine/12)), math.rad(10 + 0 * math.sin(sine/12)), math.rad(-30 + 0 * math.sin(sine/4))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1.5 + 0 * math.sin(sine/12), 0.2 + 0 * math.sin(sine/12), 0.5 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-40 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(-4 + 0 * math.sin(sine/12))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/12), 1 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-47 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/12), 2 + 0 * math.sin(sine/12), 0.4 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(20 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
elseif position == "sit" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/20), -1.8 + 0.1 * math.sin(sine/20), 0 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(0 + 5 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1.5 + 0 * math.sin(sine/20), 0.3 + 0.1 * math.sin(sine/20), -0.2 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(15 + 4 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1.5 + 0 * math.sin(sine/20), 0.3 + 0.1 * math.sin(sine/20), -0.2 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(15 + 5 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/20), 1.1 + 0 * math.sin(sine/20), -0.7 + -0.1 * math.sin(sine/20)) * CFrame.Angles(math.rad(-85 + 5 * math.sin(sine/20)), math.rad(10 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/20), 1 + 0 * math.sin(sine/20), -0.8 + -0.1 * math.sin(sine/20)) * CFrame.Angles(math.rad(-90 + 5 * math.sin(sine/20)), math.rad(-10 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
elseif position == "cry" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/16), -1.8 + 0 * math.sin(sine/16), 0 + 0 * math.sin(sine/16)) * CFrame.Angles(math.rad(-10 + 5 * math.sin(sine/16)), math.rad(0 + 0 * math.sin(sine/16)), math.rad(0 + 0 * math.sin(sine/16))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1 + 0 * math.sin(sine/20), 0.9 + 0 * math.sin(sine/20), 1 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(-140 + 0 * math.sin(sine/20)), math.rad(-75 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1 + 0 * math.sin(sine/20), 0.9 + 0 * math.sin(sine/20), 1 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(-140 + 0 * math.sin(sine/20)), math.rad(75 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/16), 1.1 + 0 * math.sin(sine/16), -0.7 + 0 * math.sin(sine/16)) * CFrame.Angles(math.rad(-95 + 5 * math.sin(sine/16)), math.rad(10 + 0 * math.sin(sine/16)), math.rad(0 + 0 * math.sin(sine/16))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/16), 1 + 0 * math.sin(sine/16), -0.8 + 0 * math.sin(sine/16)) * CFrame.Angles(math.rad(-95 + 5 * math.sin(sine/16)), math.rad(-10 + 0 * math.sin(sine/16)), math.rad(0 + 0 * math.sin(sine/16))),0.1)
elseif position == "walk" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/30), 0 + 0 * math.sin(sine/30), 0 + 0 * math.sin(sine/30)) * CFrame.Angles(math.rad(-10 + 1 * math.sin(sine/30)), math.rad(0 + 0 * math.sin(sine/30)), math.rad(0 + 0 * math.sin(sine/30))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1.5 + 0 * math.sin(sine/13), 0.3 + 0.1 * math.sin(sine/13), 0 + 0.5 * math.sin(sine/13)) * CFrame.Angles(math.rad(0 + -30 * math.sin(sine/13)), math.rad(0 + 0 * math.sin(sine/13)), math.rad(-5 + 0 * math.sin(sine/13))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1.5 + 0 * math.sin(sine/13), 0.3 + 0.1 * math.sin(sine/13), 0 + -0.5 * math.sin(sine/13)) * CFrame.Angles(math.rad(0 + 30 * math.sin(sine/13)), math.rad(0 + 0 * math.sin(sine/13)), math.rad(5 + 0 * math.sin(sine/13))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/10), 2 + -0.15 * math.sin(sine/7), 0.05 + 0 * math.sin(sine/7)) * CFrame.Angles(math.rad(-5 + -30 * math.sin(sine/7)), math.rad(0 + 0 * math.sin(sine/7)), math.rad(0 + 0 * math.sin(sine/7))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/10), 2 + 0.15 * math.sin(sine/7), 0.05 + 0 * math.sin(sine/7)) * CFrame.Angles(math.rad(-5 + 30 * math.sin(sine/7)), math.rad(0 + 0 * math.sin(sine/7)), math.rad(0 + 0 * math.sin(sine/7))),0.1)
elseif position == "run" then
change = 3
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/12), 0 + -0.3 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(20 + -20 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1.5 + 0 * math.sin(sine/12), 1 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(150 + 50 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1.5 + 0 * math.sin(sine/12), 1 + 0 * math.sin(sine/12), 0 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(150 + 50 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/12), 2 + -0.5 * math.sin(sine/12), 0.5 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(20 + -80 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/12), 2 + -0.5 * math.sin(sine/12), 0.5 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(20 + 80 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
elseif position == "walk2" then
change = 1
ROOTLERP.C0 = ROOTLERP.C0:lerp(CFrame.new(0 + 0 * math.sin(sine/16), 0 + 0 * math.sin(sine/16), 0 + 0 * math.sin(sine/16)) * CFrame.Angles(math.rad(-20 + 0 * math.sin(sine/16)), math.rad(0 + 0 * math.sin(sine/16)), math.rad(0 + 0 * math.sin(sine/16))),0.1)
RIGHTARMLERP.C0 = RIGHTARMLERP.C0:lerp(CFrame.new(-1 + 0 * math.sin(sine/20), 0.9 + 0 * math.sin(sine/20), 1 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(-140 + 0 * math.sin(sine/20)), math.rad(-75 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
LEFTARMLERP.C0 = LEFTARMLERP.C0:lerp(CFrame.new(1 + 0 * math.sin(sine/20), 0.9 + 0 * math.sin(sine/20), 1 + 0 * math.sin(sine/20)) * CFrame.Angles(math.rad(-140 + 0 * math.sin(sine/20)), math.rad(75 + 0 * math.sin(sine/20)), math.rad(0 + 0 * math.sin(sine/20))),0.1)
RIGHTLEGLERP.C0 = RIGHTLEGLERP.C0:lerp(CFrame.new(-0.5 + 0 * math.sin(sine/12), 2 + 0 * math.sin(sine/12), -0.3 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-20 + -35 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
LEFTLEGLERP.C0 = LEFTLEGLERP.C0:lerp(CFrame.new(0.5 + 0 * math.sin(sine/12), 2 + 0 * math.sin(sine/12), -0.3 + 0 * math.sin(sine/12)) * CFrame.Angles(math.rad(-20 + 35 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12)), math.rad(0 + 0 * math.sin(sine/12))),0.1)
end
swait()
end
end)()
--[[Converted using Xen Imator
------//--=================--\\
------|-- END OF THE SCRIPT --|
------\\--=================--//
]]
